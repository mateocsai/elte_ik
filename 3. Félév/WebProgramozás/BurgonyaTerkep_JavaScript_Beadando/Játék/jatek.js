addEventListener('load', () => {
   
})
//T√çPUSOK
class element
{
    constructor(time, type, shape, rotation, mirrored)
    {
        this.time = time;
        this.type = type;
        this.shape = shape;
        this.rotation = rotation;
        this.mirrored = mirrored;
    }
}
//T√çPUSOK T√ñMBJE
const elements = [
    new element(2,'water',[1,1,1,0,0,0,0,0,0],0,false),
    new element(2,'town',[1,1,1,0,0,0,0,0,0],0,false),
    new element(1,'forest',[1,1,0,0,1,1,0,0,0],0,false),
    new element(2,'farm',[1,1,1,0,0,1,0,0,0],0,false),
    new element(2,'forest',[1,1,1,0,0,1,0,0,0],0,false),
    new element(2,'town',[1,1,1,0,1,0,0,0,0],0,false),
    new element(2,'farm',[1,1,1,0,1,0,0,0,0],0,false),
    new element(1,'town',[1,1,0,1,0,0,0,0,0],0,false),
    new element(1,'town',[1,1,1,1,1,0,0,0,0],0,false),
    new element(1,'farm',[1,1,0,0,1,1,0,0,0],0,false),
    new element(1,'farm',[0,1,0,1,1,1,0,1,0],0,false),
    new element(2,'water',[1,1,1,1,0,0,1,0,0],0,false),
    new element(2,'water',[1,0,0,1,1,1,1,0,0],0,false),
    new element(2,'forest',[1,1,0,0,1,1,0,0,1],0,false),
    new element(2,'forest',[1,1,0,0,1,1,0,0,0],0,false),
    new element(2,'water',[1,1,0,1,1,0,0,0,0],0,false)
]
//K√úLDET√âSEK
class mission{
    constructor(n√©v, le√≠r√°s){
        this.n√©v=n√©v;
        this.le√≠r√°s=le√≠r√°s;
    }
}
//K√úLDET√âSEK T√ñMBJE
const missions = [

    new mission("Az erd≈ë sz√©le","A t√©rk√©ped sz√©l√©vel szomsz√©dos erd≈ëmez≈ëid√©rt egy-egy pontot kapsz."),
    new mission("√Ålmos-v√∂lgy","Minden olyan sor√©rt, amelyben h√°rom erd≈ëmez≈ë van, n√©gy-n√©gy pontot kapsz."),
    new mission("Krumpli√∂nt√∂z√©s","A farmmez≈ëiddel szomsz√©dos v√≠zmez≈ëid√©rt k√©t-k√©t pontot kapsz."),
    new mission("Hat√°rvid√©k","Minden teli sor√©rt vagy oszlop√©rt 6-6 pontot kapsz."),
    new mission("Fasor","A leghosszabb, f√ºgg≈ëlegesen megszak√≠t√°s n√©lk√ºl egybef√ºgg≈ë erd≈ëmez≈ëk mindegyik√©√©rt kett≈ë-kett≈ë pontot kapsz. K√©t azonos hossz√∫s√°g√∫ eset√©n csak az egyik√©rt."),
    new mission("Gazdag v√°ros", "A legal√°bb h√°rom k√ºl√∂nb√∂z≈ë terept√≠pussal szomsz√©dos falur√©gi√≥id√©rt h√°rom-h√°rom pontot kapsz."),
    new mission("√ñnt√∂z≈ëcsatorna","Minden olyan oszlopod√©rt, amelyben a farm illetve a v√≠zmez≈ëk sz√°ma megegyezik, n√©gy-n√©gy pontot kapsz. Mindk√©t terept√≠pusb√≥l legal√°bb egy-egy mez≈ënek lennie kell az oszlopban ahhoz, hogy pontot kaphass √©rte."),
    new mission("M√°gusok v√∂lgye","A hegymez≈ëiddel szomsz√©dos v√≠zmez≈ëid√©rt h√°rom-h√°rom pontot kapsz."),
    new mission("√úres telek","A v√°rosmez≈ëiddel szomsz√©dos √ºres mez≈ëk√©rt 2-2 pontot kapsz."),
    new mission("Sorh√°z","A leghosszabb, v√≠zszintesen megszak√≠t√°s n√©lk√ºl egybef√ºgg≈ë falumez≈ëk mindegyik√©√©rt kett≈ë-kett≈ë pontot kapsz."),
    new mission("P√°ratlan sil√≥k","Minden p√°ratlan sorsz√°m√∫ teli oszlopod√©rt 10-10 pontot kapsz."),
    new mission("Gazdag vid√©k","Minden legal√°bb √∂t k√ºl√∂nb√∂z≈ë terept√≠pust tartalmaz√≥ sor√©rt n√©gy-n√©gy pontot kapsz.")
]

//P√ÅLYA KIRAJZOL√ÅS
let boardImages= [];
for(let i = 0; i<121;i++){
    if(i==12 || i==41 || i ==58 || i==97 || i==104){
        boardImages[i]="Hegyvid√©k";
    }
    else{
        boardImages[i]="SimaTer√ºlet";
    }
}
    
//ALAP ADATOK
let √∂sszIdo=0;
let √∂sszPont=0;
let tavaszPont=0;
let nyarPont=0;
let oszPont=0;
let telPont=0;
const table = document.getElementById('myTable');
const cells = table.getElementsByTagName('td');


     

//MEGKEVERNI A T√çPUSOKAT
function mix(array){
    const randomelements = [];
    let counter=0;
    while (array.length > 0) {
      // V√©letlenszer≈± index kiv√°laszt√°sa az eredeti t√∂mbb≈ël
      const randomIndex = Math.floor(Math.random() * array.length);
    
      // Az elem kiv√°laszt√°sa √©s hozz√°ad√°sa az √∫j t√∂mbh√∂z
      randomelements.push(array[randomIndex]);
    
      // Kiv√°lasztott elem elt√°vol√≠t√°sa az eredeti t√∂mbb≈ël
      if(counter!=0){
        array.splice(randomIndex, 1);
      }
      counter++;
     
    }
    return randomelements;
   
}


//RANDOM 4 K√úLDET√âS
function randomMissions(array){
    const randommissions=[];
    let i = 0;
    while(i<4){
        const randomIndex = Math.floor(Math.random() * array.length);
    
        // Az elem kiv√°laszt√°sa √©s hozz√°ad√°sa az √∫j t√∂mbh√∂z
        randommissions.push(array[randomIndex]);
      
        // Kiv√°lasztott elem elt√°vol√≠t√°sa az eredeti t√∂mbb≈ël
        array.splice(randomIndex, 1);
        i++;
    }
    return randommissions;
}

//ADATOK A HTML-B≈êL
let captionTable=document.getElementById(caption1);
let startElements=mix(elements);
let randommissions=randomMissions(missions)
let missionPoint= [];
missionPoint[0]=0;
missionPoint[1]=0;
missionPoint[2]=0;
missionPoint[3]=0;

let osszPont=document.getElementById(OsszPont);
let row1=document.getElementById(sor1);
let row2=document.getElementById(sor2);
let row3=document.getElementById(sor3);
let row4=document.getElementById(missionRow1);
let row5=document.getElementById(missionRow2);

let missionPoint1=document.getElementById(mission1);
let missionPoint2=document.getElementById(mission2);
let missionPoint3=document.getElementById(mission3);
let missionPoint4=document.getElementById(mission4);


let cella=[];
cella[0]=sor1.querySelector('td:nth-child(1)')
cella[1]=sor1.querySelector('td:nth-child(2)')
cella[2]=sor1.querySelector('td:nth-child(3)')
cella[3]=sor2.querySelector('td:nth-child(1)')
cella[4]=sor2.querySelector('td:nth-child(2)')
cella[5]=sor2.querySelector('td:nth-child(3)')
cella[6]=sor3.querySelector('td:nth-child(1)')
cella[7]=sor3.querySelector('td:nth-child(2)')
cella[8]=sor3.querySelector('td:nth-child(3)')

let cella2=[];
cella2[0]=missionRow1.querySelector('td:nth-child(1)')
cella2[1]=missionRow1.querySelector('td:nth-child(2)')
cella2[2]=missionRow2.querySelector('td:nth-child(1)')
cella2[3]=missionRow2.querySelector('td:nth-child(2)')


let ready=startElements[0];
let counter=0;
let ido=0;
let evszakIdo=document.getElementById(hatralevoIdo);
let jelenlegiEvszak=document.getElementById(JelenlegiEvszak);
let tavaszDoboz=document.getElementById(tavasz);
let nyarDoboz=document.getElementById(nyar);
let oszDoboz=document.getElementById(osz);
let telDoboz=document.getElementById(tel);
let aPoint=document.getElementById(A);
let bPoint=document.getElementById(B);
let cPoint=document.getElementById(C);
let dPoint=document.getElementById(D);




//ALAKZAT KIRAJZOL√ÅSA
function drawElements(array){
   
    for(let i = 0; i<9; i++){
        x=array; //startElements
        if(x.shape[i]==1){
            if(x.type=='forest'){
            cella[i].innerHTML='<img src="./../KeÃÅpek/ErdoÃã.png" width="100%" alt="">'
            }
            if(x.type=='farm'){
            cella[i].innerHTML='<img src="./../KeÃÅpek/Farm.png" width="100%" alt="">'
            }
            if(x.type=='water'){
                cella[i].innerHTML='<img src="./../KeÃÅpek/V√≠z.png" width="100%" alt="">'
            }
            if(x.type=='town'){
                cella[i].innerHTML='<img src="./../KeÃÅpek/H√°z.png" width="100%" alt="">'
            }
            
        }
        else{
            cella[i].innerHTML="";
        }
        //y=x.shape[i];
}
caption1.innerHTML=`${array.time} üïí`;

}
drawElements(ready);


//K√úLDET√âSEK KIRAJZOL√ÅSA
function drawMissions(array){
    for(let i=0; i<4; i++){
        switch (array[i].n√©v){
            case "Az erd≈ë sz√©le":
                    cella2[i].innerHTML='<img src="./../K√©pek/Azerd≈ësz√©le.png" width="100%" alt="">'

                    break;
            case "√Ålmos-v√∂lgy":
                    cella2[i].innerHTML='<img src="./../K√©pek/√Ålmosv√∂lgy.png" width="100%" alt="">'
                    break;
            case "Krumpli√∂nt√∂z√©s":
                    cella2[i].innerHTML='<img src="./../K√©pek/Krumpli√∂nt√∂z√©s.png" width="100%" alt="">'
                    break;
            case "Hat√°rvid√©k":
                    cella2[i].innerHTML='<img src="./../K√©pek/Hat√°rvid√©k.png" width="100%" alt="">'
                    break;
            case "Fasor":
                    cella2[i].innerHTML='<img src="./../K√©pek/Fasor.png" width="100%" alt="">'
                    break;
            case "Gazdag v√°ros":
                    cella2[i].innerHTML='<img src="./../K√©pek/Gazdagv√°ros.png" width="100%" alt="">'
                    break;
            case "√ñnt√∂z≈ëcsatorna":
                    cella2[i].innerHTML='<img src="./../K√©pek/√ñnt√∂z≈ëcsatorna.png" width="100%" alt="">'
                    break;
            case "M√°gusok v√∂lgye":
                    cella2[i].innerHTML='<img src="./../K√©pek/M√°gusokv√∂lgye.png" width="100%" alt="">'
                    break;
            case "√úres telek":
                    cella2[i].innerHTML='<img src="./../K√©pek/√úrestelek.png" width="100%" alt="">'
                    break;
            case "Sorh√°z":
                    cella2[i].innerHTML='<img src="./../K√©pek/Sorh√°z.png" width="100%" alt="">'
                    break;
            case "P√°ratlan sil√≥k":
                    cella2[i].innerHTML='<img src="./../K√©pek/P√°ratlansil√≥k.png" width="100%" alt="">'
                    break;
            case "Gazdag vid√©k":
                    cella2[i].innerHTML='<img src="./../K√©pek/Gazdagvid√©k.png" width="100%" alt="">'
                    break;
        }
    }
   
   
}

drawMissions(randommissions);


let working=true;
let computedStyle;
let backgroundImage;
console.log(ready.shape);

//EVENT MIKOR CELLA F√ñL√â VISZEM AZ EGERET
if(working){
table.addEventListener('mouseover', (event) => {
    if (event.target.tagName === 'TD') {
        let rowindex=event.target.parentNode.rowIndex;
        let cellindex=event.target.cellIndex;
        let l=true;
        
        if(cellindex==9 && (ready.shape[2]==1 || ready.shape[5]==1 || ready.shape[8]==1)){
            l=false;
        }
        if(rowindex==9 && (ready.shape[6]==1 || ready.shape[7]==1 || ready.shape[8]==1)){
            l=false;
        }
        if(cellindex==10 && (ready.shape[1]==1 || ready.shape[4]==1 || ready.shape[7]==1)){
            l=false;
        }
        if(rowindex==10 && (ready.shape[3]==1 || ready.shape[4]==1 || ready.shape[5]==1)){
            l=false;
        }


        if(l){
            for(let i = rowindex; i<rowindex+3; i++){
                for(let j = cellindex; j<cellindex+3; j++){
                    if((ready.shape[(i-rowindex)*3+(j-cellindex)]==1 && boardImages[i*11+j]!="SimaTer√ºlet")){
                        l=false;
                        break;
                    
                    }
                    if(!l){break;}
                    
                }
                if(!l){break;}
                
            }
        }

        if(!l){
            computedStyle=getComputedStyle(event.target);
            backgroundImage = computedStyle.getPropertyValue('background-image');
            event.target.style.backgroundImage = 'initial';
            event.target.style.backgroundColor='red'
        }
        else{
            

            computedStyle=getComputedStyle(event.target);
            backgroundImage = computedStyle.getPropertyValue('background-image');
            event.target.style.backgroundImage = 'initial';
            event.target.style.backgroundColor='lightgreen'

            }
        
        }
   } )};

//EVENT AMIKOR LEVISZEM AZ EGERET A CELL√âR√ìL
if(working){
table.addEventListener('mouseout', (event) => {
    if (event.target.tagName === 'TD') {
        event.target.style.backgroundColor = '';
        event.target.style.backgroundImage=backgroundImage;


    }
})};

//SZOMSZ√âDOS CELL√ÅK MEGHAT√ÅROZ√ÅSA
function getNeighbors(cell){
    const neighbors=[];
    const rowIndex=cell.parentNode.rowIndex;
    const cellIndex=cell.cellIndex;
    for (let i = rowIndex ; i < rowIndex + 3; i++) {
        for (let j = cellIndex; j < cellIndex + 3; j++) {

            const neighbor = table.rows[i].cells[j];  
            neighbors.push(neighbor);
            if(j+1==11){break;}
             
        }
        if(i+1==11){break;}
       
    }
    return neighbors;
}


//EVENT AMIKOR R√ÅKATTINTOK EGY CELL√ÅRA
if(working){
    table.addEventListener('click', (event) => {
        let cells=[];
        if (event.target.tagName === 'TD') {

            let rowindex=event.target.parentNode.rowIndex;
            let cellindex=event.target.cellIndex;
            let l = true;

            if(cellindex==9 && (ready.shape[2]==1 || ready.shape[5]==1 || ready.shape[8]==1)){
                l=false;
            }
            if(rowindex==9 && (ready.shape[6]==1 || ready.shape[7]==1 || ready.shape[8]==1)){
                l=false;
            }
            if(cellindex==10 && (ready.shape[1]==1 || ready.shape[4]==1 || ready.shape[7]==1)){
                l=false;
            }
            if(rowindex==10 && (ready.shape[3]==1 || ready.shape[4]==1 || ready.shape[5]==1)){
                l=false;
            }
            
            
       
             if(l){ 
                for(let i = rowindex; i<rowindex+3; i++){
                    for(let j = cellindex; j<cellindex+3; j++){
                       
                       
                        if(ready.shape[(i-rowindex)*3+(j-cellindex)]==1 && boardImages[i*11+j]!="SimaTer√ºlet"){
                            l=false;
                            break;
                           
                        }
                        if(!l){break;}
                        
                    }
                    if(!l){break;}
                    
                }
            }

                
                if(l){

                const neighbors=getNeighbors(event.target);
                let k = 0;
                for( const neighbor of neighbors){
                    if(ready.shape[k]==1){
                        switch(ready.type){
                            case "water":
                                neighbor.style.backgroundImage='url("./../K√©pek/V√≠z.png")';
                                if(ready.shape[0]==0){}
                                else{backgroundImage='url("./../K√©pek/V√≠z.png")';}
                                break;
                            case "farm":
                                neighbor.style.backgroundImage='url("./../K√©pek/Farm.png")';
                                if(ready.shape[0]==0){}
                                else{backgroundImage='url("./../K√©pek/Farm.png")';}
                                break;
                            case "forest":
                                neighbor.style.backgroundImage='url("./../K√©pek/Erd≈ë.png")';
                                if(ready.shape[0]==0){}
                                else{backgroundImage='url("./../K√©pek/Erd≈ë.png")';}
                                break;
                            case "town":
                                neighbor.style.backgroundImage='url("./../K√©pek/H√°z.png")';
                                if(ready.shape[0]==0){}
                                else{backgroundImage='url("./../K√©pek/H√°z.png")';}
                                break;
                        }
                        
                    }
                    k++;
                    
                }
               
                for(let i = rowindex; i<rowindex+3; i++){
                    for(let j = cellindex; j<cellindex+3; j++){
                       if(ready.shape[(i-rowindex)*3+(j-cellindex)]==1){
                        switch(ready.type){
                            case "water":
                                boardImages[i*11+j]="V√≠z";
                                break;
                            case "farm":
                                boardImages[i*11+j]="Farm";
                                break;
                            case "forest":
                                boardImages[i*11+j]="Erd≈ë";
                                break;
                            case "town":
                                boardImages[i*11+j]="H√°z";
                                break;
                        }
                        
                       }
                       
                    }
                }
            
                }
                if(l){
                    
                    
                    
                    let evszak=Math.floor(ido/7); 
                    let point=0;
                    
                    for(let i = 0; i<4; i++){
                        let calculate=false;
                        switch(i){
                            case 0:
                                if(evszak==0 || evszak==3){
                                    calculate=true;
                                }
                                break;
                                case 1:
                                if(evszak==0 || evszak==1){
                                    calculate=true;
                                }
                                break;
                                case 2:
                                if(evszak==1 || evszak==2){
                                    calculate=true;
                                }
                                break;
                                case 3:
                                if(evszak==2 || evszak==3){
                                    calculate=true;
                                }
                                break;
                                
                        }
                       
                       
                        if(calculate){
                            switch(randommissions[i].n√©v){
                                case "Az erd≈ë sz√©le":
                                    point+=azErdoSzele(boardImages);
                                    missionPoint[i]=azErdoSzele(boardImages);
                                        break;
                                case "√Ålmos-v√∂lgy":
                                    point+=almosVolgy(boardImages);
                                    missionPoint[i]=almosVolgy(boardImages);
                                        break;
                                case "Krumpli√∂nt√∂z√©s":
                                    point+=krumpliOntozes(boardImages);
                                    missionPoint[i]=krumpliOntozes(boardImages);
                                        break;
                                case "Hat√°rvid√©k":
                                    point+=hatarVidek(boardImages);
                                    missionPoint[i]=hatarVidek(boardImages);
                                        break;
                                case "Fasor":
                                    point+=faSor(boardImages);
                                    missionPoint[i]=faSor(boardImages);
                                        break;
                                case "Gazdag v√°ros":
                                    point+=gazdagVaros(boardImages);
                                    missionPoint[i]=gazdagVaros(boardImages);
                                        break;
                                case "√ñnt√∂z≈ëcsatorna":
                                    point+=ontozoCsatorna(boardImages);
                                    missionPoint[i]=ontozoCsatorna(boardImages);
                                        break;
                                case "M√°gusok v√∂lgye":
                                    point+=magusokVolgye(boardImages);
                                    missionPoint[i]=magusokVolgye(boardImages);
                                        break;
                                case "√úres telek":
                                    point+=uresTelek(boardImages);
                                    missionPoint[i]=uresTelek(boardImages);
                                        break;
                                case "Sorh√°z":
                                    point+=sorHaz(boardImages);
                                    missionPoint[i]=sorHaz(boardImages);
                                        break;
                                case "P√°ratlan sil√≥k":
                                    point+=paratlanSilok(boardImages);
                                    missionPoint[i]=paratlanSilok(boardImages);
                                        break;
                                case "Gazdag vid√©k":
                                    point+=gazdagVidek(boardImages);
                                    missionPoint[i]=gazdagVidek(boardImages);
                                        break;
                                }
                        }
                    }
                    
                    
                    switch(evszak){
                        case 0:

                            tavaszPont=point;
                            tavasz.innerHTML=`Tavasz: <br> ${tavaszPont} pont`
                            A.innerHTML=`A (${missionPoint[0]} pont)`
                            B.innerHTML=`B (${missionPoint[1]} pont)`
                            break;
                        case 1:
                            nyarPont=point;
                            nyar.innerHTML=`Ny√°r: <br> ${nyarPont} pont`
                            C.innerHTML=`C (${missionPoint[2]} pont)`
                            B.innerHTML=`B (${missionPoint[1]} pont)`
                           
                            break;
                        case 2:
                            oszPont=point;
                            osz.innerHTML=`≈êsz: <br> ${oszPont} pont`
                            C.innerHTML=`C (${missionPoint[2]} pont)`
                            D.innerHTML=`D (${missionPoint[3]} pont)`
                           
                            break;
                        case 3:
                            telPont=point;
                            tel.innerHTML=`T√©l: <br> ${telPont} pont`
                            A.innerHTML=`A (${missionPoint[0]} pont)`
                            D.innerHTML=`D (${missionPoint[3]} pont)`
                            
                            break;
                    }

                    √∂sszPont=tavaszPont+nyarPont+oszPont+telPont+hegyBekerites(boardImages);
                    console.log(hegyBekerites(boardImages));
                    OsszPont.innerHTML=`√ñsszpont: ${√∂sszPont} pont`;
                    
                    counter++;
                    ido+=ready.time;
                    if(ido<28){
                        hatralevoIdo.innerHTML=`√âvszakb√≥l h√°tralev≈ë id≈ë: ${7-(ido%7)}/7`;
                        evszak=Math.floor(ido/7); 
                        switch(evszak){
                            case 0:
                                JelenlegiEvszak.innerHTML="Jelenlegi √âvszak: Tavasz (A/B)"
                                break;
                            case 1:
                                JelenlegiEvszak.innerHTML="Jelenlegi √âvszak: Ny√°r (B/C)"
                                A.classList.remove("aktiv");
                                C.classList.add("aktiv");
                                break;
                            case 2:
                                JelenlegiEvszak.innerHTML="Jelenlegi √âvszak: ≈êsz (C/D)"
                                D.classList.add("aktiv");
                                B.classList.remove("aktiv");
                                break;
                            case 3:
                                JelenlegiEvszak.innerHTML="Jelenlegi √âvszak: T√©l (D/A)"
                                A.classList.add("aktiv");
                                C.classList.remove("aktiv");
                                break;
                        }
                        
                       
                            ready=startElements[counter];
                            drawElements(ready);
                            console.log(startElements);
                    }
                    else{
                        hatralevoIdo.innerHTML=`V√©ge a j√°t√©knak`;
                    }
                   
                } 
                }                     
        }   
    )};





//FORGAT√ÅS M≈∞VELET
    function forgat(array){
        let segedarray=[];
        if(array[0]==1){
            segedarray[2]=1;
        }
        if(array[0]==0){
            segedarray[2]=0;
        }
        if(array[1]==1){
            segedarray[5]=1;
        }
        if(array[1]==0){
            segedarray[5]=0;
        }
        if(array[2]==1){
            segedarray[8]=1;
        }
        if(array[2]==0){
            segedarray[8]=0;
        }
        if(array[3]==1){
            segedarray[1]=1;
        }
        if(array[3]==0){
            segedarray[1]=0;
        }
        if(array[4]==1){
            segedarray[4]=1;
        }
        if(array[4]==0){
            segedarray[4]=0;
        }

        if(array[5]==1){
            segedarray[7]=1;
        }
        if(array[5]==0){
            segedarray[7]=0;
        }
        if(array[6]==1){
            segedarray[0]=1;
        }
        if(array[6]==0){
            segedarray[0]=0;
        }
        if(array[7]==1){
            segedarray[3]=1;
        }
        if(array[7]==0){
            segedarray[3]=0;
        }
        if(array[8]==1){
            segedarray[6]=1;
        }
        if(array[8]==0){
            segedarray[6]=0;
        }
        
        return segedarray;
       
    }



    Forgat.addEventListener('click',()=>{
        
        ready.shape=forgat(ready.shape);
        drawElements(ready);
       
    })

//T√úKR√ñZ√âS M≈∞VELET
    function tukroz(array){
        let segedarray=[];
        if(array[0]==1){
            segedarray[2]=1;
        }
        if(array[0]==0){
            segedarray[2]=0;
        }
        if(array[1]==1){
            segedarray[1]=1;
        }
        if(array[1]==0){
            segedarray[1]=0;
        }
        if(array[2]==1){
            segedarray[0]=1;
        }
        if(array[2]==0){
            segedarray[0]=0;
        }
        if(array[3]==1){
            segedarray[5]=1;
        }
        if(array[3]==0){
            segedarray[5]=0;
        }
        if(array[4]==1){
            segedarray[4]=1;
        }
        if(array[4]==0){
            segedarray[4]=0;
        }

        if(array[5]==1){
            segedarray[3]=1;
        }
        if(array[5]==0){
            segedarray[3]=0;
        }
        if(array[6]==1){
            segedarray[8]=1;
        }
        if(array[6]==0){
            segedarray[8]=0;
        }
        if(array[7]==1){
            segedarray[7]=1;
        }
        if(array[7]==0){
            segedarray[7]=0;
        }
        if(array[8]==1){
            segedarray[6]=1;
        }
        if(array[8]==0){
            segedarray[6]=0;
        }
        
        return segedarray;
    }

    Tukroz.addEventListener('click',()=>{
        
        ready.shape=tukroz(ready.shape);
        drawElements(ready);
       
    })
    
    

//K√úLDET√âSEK KISZ√ÅMOL√ÅSA
function azErdoSzele(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        for(let j = 0; j< 11; j++){
            if(i==0 || j==0 || i==10 || j==10){
               if(array[i*11+j]=="Erd≈ë"){
                point++;
               } 
            }
        }
    }
    
    return point;
}
function almosVolgy(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        let db=0;
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]=="Erd≈ë"){
                db++;
            }
        }
        if(db==3){
            point+=4;
        }
    }
    
    return point;
}
function krumpliOntozes(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]=="Farm"){
                
                if(i-1!=-1){
                    if(array[(i-1)*11+j]=="V√≠z"){
                        point+=2;
                    }
                }
                if(j+1!=11){
                    if(array[i*11+(j+1)]=="V√≠z"){
                        point+=2;
                    }
                }
                if(j-1!=-1){
                    if(array[i*11+(j-1)]=="V√≠z"){
                        point+=2;
                    }
                }
                if(i+1!=11){
                    if(array[(i+1)*11+j]=="V√≠z"){
                        point+=2;
                    }
                }        
                
            }
        }
    }
   
    return point;
}

function hatarVidek(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        let counter=0;
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]!="SimaTer√ºlet"){
                counter++;
            }
        }
        if(counter==11){
            point+=6;
        }
    }
    for(let i = 0; i< 11; i++){
        let counter=0;
        for(let j = 0; j< 11; j++){
            if(array[i+(j*11)]!="SimaTer√ºlet"){
                counter++;
            }
        }
        if(counter==11){
            point+=6;
        }
    }
    
    return point;
}

function faSor(array){
    let point=0;
    let maxSor=[];
    let maximum;
    for(let i = 0; i< 11; i++){
        let max=0;
        let still=false;
        let counter=0;
        for(let j = 0; j< 11; j++){
            if(!still){
                if(array[i+(j*11)]=="Erd≈ë"){
                    still=true;
                    counter++;
                }
            }
            else if(still){
                if(array[i+(j*11)]=="Erd≈ë"){
                    counter++;
                }
                else{
                    if(counter>max){
                        max=counter;
                    }
                    counter=0;
                    still=false;
                }
            }
        }
        if(still){
            if(counter>max){
                max=counter;
            }
        }
        maxSor.push(max);
    }
    maximum=maxSor[0];
    for(let i=1; i<maxSor.length;i++){
        if(maxSor[i]>maximum){
            maximum=maxSor[i];
        }
    }
    point=maximum*2;
    
    return point;

}
function gazdagVaros(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]=="H√°z"){
                let counter=[];
                if(i-1!=-1){
                    if((!counter.includes(array[(i-1)*11+j]))&& array[(i-1)*11+j]!="SimaTer√ºlet"){
                        counter.push(array[(i-1)*11+j]);
                    }
                }
                if(j+1!=11){
                    if((!counter.includes(array[i*11+j+1])) && array[i*11+j+1]!="SimaTer√ºlet"){
                        counter.push(array[i*11+j+1]);
                    }
                }
                if(j-1!=-1){
                    if((!counter.includes(array[i*11+j-1])) && array[i*11+j-1]!="SimaTer√ºlet" ){
                        counter.push(array[i*11+j-1]);
                    }
                }
                if(i+1!=11){
                    if((!counter.includes(array[(i+1)*11+j])) && array[(i+1)*11+j]!="SimaTer√ºlet"){
                        counter.push(array[(i+1)*11+j]);
                    }
                }        
                if(counter.length>2){
                    point+=3;
                }
            }
        }
    }
    
    return point;

}

function ontozoCsatorna(array){
    let point = 0;
    for(let i = 0; i< 11; i++){
        let countFarm=0;
        let countViz=0;
        for(let j = 0; j< 11; j++){
            if(array[i+j*11]=="V√≠z"){
                countViz++;
            }
            if(array[i+j*11]=="Farm"){
                countFarm++;
            }
        }
        if(countFarm!=0 && countFarm==countViz){
            point+=4;
        }
    }
    
    return point;

}
function magusokVolgye(array){
    let point = 0;

    for(let i = 0; i< 11; i++){
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]=="V√≠z"){
                if(i-1!=-1){
                    if(array[(i-1)*11+j]=="Hegyvid√©k"){
                        point+=3;
                    }
                }
                if(j+1!=11){
                    if(array[i*11+(j+1)]=="Hegyvid√©k"){
                        point+=3;
                    }
                }
                if(j-1!=-1){
                    if(array[i*11+(j-1)]=="Hegyvid√©k"){
                        point+=3;
                    }
                }
                if(i+1!=11){
                    if(array[(i+1)*11+j]=="Hegyvid√©k"){
                        point+=3;
                    }
                }        
            }
        }
    }
    
    return point;

}

function uresTelek(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        for(let j = 0; j< 11; j++){
            if(array[i*11+j]=="H√°z"){
                if(i-1!=-1){
                    if(array[(i-1)*11+j]=="SimaTer√ºlet"){
                        point+=2;
                    }
                }
                if(j+1!=11){
                    if(array[i*11+(j+1)]=="SimaTer√ºlet"){
                        point+=2;
                    }
                }
                if(j-1!=-1){
                    if(array[i*11+(j-1)]=="SimaTer√ºlet"){
                        point+=2;
                    }
                }
                if(i+1!=11){
                    if(array[(i+1)*11+j]=="SimaTer√ºlet"){
                        point+=2;
                    }
                }        
            }
        }
    }
    
    return point;
}

function sorHaz(array){
    let point=0;
    let maxSor=[];
    let maximum;
    for(let i = 0; i< 11; i++){
        let max=0;
        let still=false;
        let counter=0;
        for(let j = 0; j< 11; j++){
            if(!still){
                if(array[i*11+j]=="H√°z"){
                    still=true;
                    counter++;
                }
            }
            else if(still){
                if(array[i*11+j]=="H√°z"){
                    counter++;
                }
                else{
                    if(counter>max){
                        max=counter;
                    }
                    counter=0;
                    still=false;
                }
            }
        }
        if(still){
            if(counter>max){
                max=counter;
            }
        }
        maxSor.push(max);
    }
    maximum=maxSor[0];
    for(let i=1; i<maxSor.length;i++){
        if(maxSor[i]>maximum){
            maximum=maxSor[i];
        }
    }
    for(let i=0; i<maxSor.length;i++){
        if(maxSor[i]==maximum){
            point+=maximum*2;
        }
    }

    
   
    return point;

}

function paratlanSilok(array){
    let point=0;
    for(let i = 0; i< 11; i+=2){
        let count=0;
        for(let j = 0; j< 11; j++){
            if(array[i+j*11]!="SimaTer√ºlet"){
                count++;
            }
        }
        if(count==11){
            point+=10;
        }
    }
    
    return point;
}

function gazdagVidek(array){
    let point=0;
    for(let i = 0; i< 11; i++){
        let counter=[];
        for(let j = 0; j< 11; j++){
            if((!counter.includes(array[i*11+j]))&& array[i*11+j]!="SimaTer√ºlet"){
                counter.push(array[i*11+j]);
            }
        }
        if(counter.length>4){
            point+=4;
        }
    }
    
    return point;
}

function hegyBekerites(array){
    let point=0;
    if(array[11]!="SimaTer√ºlet" && array[1]!="SimaTer√ºlet" && array[23]!="SimaTer√ºlet" && array[13]!="SimaTer√ºlet"){
        point+=1;
    }
    if(array[42]!="SimaTer√ºlet" && array[40]!="SimaTer√ºlet" && array[30]!="SimaTer√ºlet" && array[52]!="SimaTer√ºlet"){
        point+=1;
    }
    if(array[47]!="SimaTer√ºlet" && array[57]!="SimaTer√ºlet" && array[59]!="SimaTer√ºlet" && array[69]!="SimaTer√ºlet"){
        point+=1;
    }
    if(array[86]!="SimaTer√ºlet" && array[96]!="SimaTer√ºlet" && array[98]!="SimaTer√ºlet" && array[108]!="SimaTer√ºlet"){
        point+=1;
    }
    if(array[103]!="SimaTer√ºlet" && array[105]!="SimaTer√ºlet" && array[93]!="SimaTer√ºlet" && array[115]!="SimaTer√ºlet"){
        point+=1;
    }
    return point;
}






   

    

















    
